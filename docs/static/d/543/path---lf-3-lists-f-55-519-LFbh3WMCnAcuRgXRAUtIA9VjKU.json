{"data":{"site":{"siteMetadata":{"title":"Bee starter","author":"[Your Name]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"9f6f9a20-d8e0-5eb2-8f84-6c2eec8a7f46","excerpt":"3. Lists: 배열 데이터 타입 Pair 타입 우선 두 개의 nat을 가지는 pair type을 정의하자.  타입은 pair라는 하나의 타입 유형을 가지는데, 이 pair는 두 개의 nat를 차례로 받아 하나의 pair를 만든다. 예를 들어 를 실행하면, 가 response로 출력된다.  는   타입의 한 종류이기 때문에, 그 타입은 natprod가 된다. 그럼 이제 이 pair에 대해 함수를 정의해보자. pair 타입이기 때문에 fst와 snd가 먼저 정의되어야 한다. pair…","html":"<h1 id=\"3-lists-배열-데이터-타입\"><a href=\"#3-lists-%EB%B0%B0%EC%97%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85\" aria-label=\"3 lists 배열 데이터 타입 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Lists: 배열 데이터 타입</h1>\n<h2 id=\"pair-타입\"><a href=\"#pair-%ED%83%80%EC%9E%85\" aria-label=\"pair 타입 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pair 타입</h2>\n<p>우선 두 개의 nat을 가지는 pair type을 정의하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Inductive natprod <span class=\"token punctuation\">:</span> Type <span class=\"token operator\">:=</span>\n<span class=\"token operator\">|</span> pair <span class=\"token punctuation\">:</span> nat <span class=\"token operator\">-></span> nat <span class=\"token operator\">-></span> natprod<span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">natprod</code> 타입은 pair라는 하나의 타입 유형을 가지는데, 이 pair는 두 개의 nat를 차례로 받아 하나의 pair를 만든다. 예를 들어</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Check <span class=\"token punctuation\">(</span>pair <span class=\"token number\">3</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>를 실행하면,</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">pair <span class=\"token number\">3</span> <span class=\"token number\">5</span>\n     <span class=\"token punctuation\">:</span> natprod</code></pre></div>\n<p>가 response로 출력된다. <code class=\"language-text\">pair 3 5</code>는 <code class=\"language-text\">natprod</code> 타입의 한 종류이기 때문에, 그 타입은 natprod가 된다. 그럼 이제 이 pair에 대해 함수를 정의해보자. pair 타입이기 때문에 fst와 snd가 먼저 정의되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition fst <span class=\"token punctuation\">(</span> p <span class=\"token punctuation\">:</span> natprod <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nat <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> p <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> pair x y <span class=\"token operator\">=></span> x\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span>\n  \nDefinition snd <span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">:</span> natprod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nat <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> p <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> pair x y <span class=\"token operator\">=></span> y\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>pair가 아닌 경우는 반환값을 정의하지 않았다. 그럼 이제 pair에다가 좀 더 편리한 표기법을 더해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Notation <span class=\"token string\">\"( x , y )\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>pair x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\nDefinition fst' <span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">:</span> natprod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nat <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> p <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span>\n\nDefinition snd' <span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">:</span> natprod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nat <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> p <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> y\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span>\n\nDefinition swap<span class=\"token punctuation\">_</span>pair <span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">:</span> natprod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> natprod <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> p <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>pair를 대충 정의하였으니, pair의 기본적인 성질들에 대해 증명을 해보자. 일단 surjectivity.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Theorem surjective<span class=\"token punctuation\">_</span>pairing' <span class=\"token punctuation\">:</span> forall <span class=\"token punctuation\">(</span>n m <span class=\"token punctuation\">:</span> nat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fst <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> snd <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\nProof<span class=\"token punctuation\">.</span>\n  reflexivity<span class=\"token punctuation\">.</span>\nQed<span class=\"token punctuation\">.</span></code></pre></div>\n<p>surjective function은 전사함수, y의 치역과 공역이 같을 때를 말한다. 이 경우에는 아마 이미 정의된 pair p에 대하여 새로 정의한 fst와 snd 함수를 적용했을 때, 그 결과물이 여전히 p이기 때문에, 공역과 치역이 같아진다고 말하는 듯 하다. 위의 경우는 이 p가 무엇을 의미하는지를, (n,m)과 같이 분리해서 적었기 때문에 바로 simplify할 수 있다. 그러나 다음과 같은 경우는 곧바로 simplify되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Theorem surjective<span class=\"token punctuation\">_</span>pairing<span class=\"token punctuation\">_</span>stuck <span class=\"token punctuation\">:</span> forall <span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">:</span> natprod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fst p<span class=\"token punctuation\">,</span> snd p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\nProof<span class=\"token punctuation\">.</span>\n  simpl<span class=\"token punctuation\">.</span> <span class=\"token comment\">(* Doesn't reduce anything! *)</span>\nAbort<span class=\"token punctuation\">.</span></code></pre></div>\n<p>따라서 우리는 destruct를 통해 p의 패턴 매칭을 해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Theorem surjective<span class=\"token punctuation\">_</span>pairing <span class=\"token punctuation\">:</span> forall <span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">:</span> natprod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fst p<span class=\"token punctuation\">,</span> snd p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\nProof<span class=\"token punctuation\">.</span>\n  intros p<span class=\"token punctuation\">.</span>  destruct p <span class=\"token keyword\">as</span> <span class=\"token punctuation\">[</span>n m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>  simpl<span class=\"token punctuation\">.</span>  reflexivity<span class=\"token punctuation\">.</span>  Qed<span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"자연수-리스트의-정의\"><a href=\"#%EC%9E%90%EC%97%B0%EC%88%98-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\"자연수 리스트의 정의 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자연수 리스트의 정의</h2>\n<p>아까 정의한 natprod 타입을 보다 일반적으로 확장하여 리스트 형태로 만들어보자. 대부분의 언어에서 list가 정의되는 것처럼,</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Inductive natlist <span class=\"token punctuation\">:</span> Type <span class=\"token operator\">:=</span>\n  <span class=\"token operator\">|</span> nil  <span class=\"token punctuation\">:</span> natlist\n  <span class=\"token operator\">|</span> cons <span class=\"token punctuation\">:</span> nat <span class=\"token operator\">-></span> natlist <span class=\"token operator\">-></span> natlist<span class=\"token punctuation\">.</span></code></pre></div>\n<p>와 같이 정의하자. cons는 nat 하나와 natlist를 받아 natlist를 만들고, nil은 아무 인자도 받지 않은 채로 natlist를 만든다. 예를 들어 [1, 2, 3]의 리스트는</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition mylist <span class=\"token operator\">:=</span> cons <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>cons <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>cons <span class=\"token number\">3</span> nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>와 같이 정의될 수 있다. 여기에도 마찬가지로 새로운 notation을 더해주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Notation <span class=\"token string\">\"x :: l\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>cons x l<span class=\"token punctuation\">)</span>\n                     <span class=\"token punctuation\">(</span>at level <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> right associativity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\nNotation <span class=\"token string\">\"[ ]\"</span> <span class=\"token operator\">:=</span> nil<span class=\"token punctuation\">.</span>\nNotation <span class=\"token string\">\"[ x ; .. ; y ]\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>cons x <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">(</span>cons y nil<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>그럼 이제 보다 편하게</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition mylist1 <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> nil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\nDefinition mylist2 <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> nil<span class=\"token punctuation\">.</span>\nDefinition mylist3 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>와 같이 리스트를 정의할 수 있다.</p>\n<h2 id=\"리스트와-관련된-기본적인-함수들\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EA%B4%80%EB%A0%A8%EB%90%9C-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%ED%95%A8%EC%88%98%EB%93%A4\" aria-label=\"리스트와 관련된 기본적인 함수들 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트와 관련된 기본적인 함수들</h2>\n<p>리스트를 다루는 기본적인 함수들을 정의해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Fixpoint repeat <span class=\"token punctuation\">(</span>n count <span class=\"token punctuation\">:</span> nat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> natlist <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> count <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> O <span class=\"token operator\">=></span> nil\n  <span class=\"token operator\">|</span> S count' <span class=\"token operator\">=></span> n <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>repeat n count'<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>위와 같은 <code class=\"language-text\">repeat</code> 함수는 <code class=\"language-text\">n</code>과 <code class=\"language-text\">count</code>를 인자로 받아, count 개 만큼의 n이 이어지는 리스트를 만든다. 예를 들어</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">repeat <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>이 성립한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Fixpoint length <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">:</span>natlist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nat <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> l <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> nil <span class=\"token operator\">=></span> O\n  <span class=\"token operator\">|</span> h <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> t <span class=\"token operator\">=></span> S <span class=\"token punctuation\">(</span>length t<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>length 함수는 주어진 리스트의 길이를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Fixpoint app <span class=\"token punctuation\">(</span>l1 l2 <span class=\"token punctuation\">:</span> natlist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> natlist <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> l1 <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> nil    <span class=\"token operator\">=></span> l2\n  <span class=\"token operator\">|</span> h <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> t <span class=\"token operator\">=></span> h <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>app t l2<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span>\n\nNotation <span class=\"token string\">\"x ++ y\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>app x y<span class=\"token punctuation\">)</span>\n                     <span class=\"token punctuation\">(</span>right associativity<span class=\"token punctuation\">,</span> at level <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>app 함수는 주어진 두 리스트를, 순서대로 결합한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition hd <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">:</span>nat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">:</span>natlist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nat <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> l <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> nil <span class=\"token operator\">=></span> default\n  <span class=\"token operator\">|</span> h <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> t <span class=\"token operator\">=></span> h\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span>\n\nDefinition tl <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">:</span>natlist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> natlist <span class=\"token operator\">:=</span>\n  <span class=\"token keyword\">match</span> l <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> nil <span class=\"token operator\">=></span> nil\n  <span class=\"token operator\">|</span> h <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> t <span class=\"token operator\">=></span> t\n  <span class=\"token keyword\">end</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>hd와 tl은 각각 리스트의 head와 tail을 반환한다.</p>\n<h2 id=\"리스트를-이용한-bag의-구현\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-bag%EC%9D%98-%EA%B5%AC%ED%98%84\" aria-label=\"리스트를 이용한 bag의 구현 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트를 이용한 bag의 구현</h2>\n<p>bag은 set과 비슷하지만, 한 element가 여러 번 나타날 수 있다는 점에서 다르다. 즉, 원소의 순서는 상관 없고, 같은 원소가 여러 번 등장할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition bag <span class=\"token operator\">:=</span> natlist<span class=\"token punctuation\">.</span>\nDefinition sum <span class=\"token punctuation\">:</span> bag <span class=\"token operator\">-></span> bag <span class=\"token operator\">-></span> bag <span class=\"token operator\">:=</span> app<span class=\"token punctuation\">.</span></code></pre></div>\n<p>bag은 데이터 구조상으로는 natlist와 동일하다. 그리고 함수 sum은 집합으로는 합집합에 해당한다. sum a b는 a와 b의 모든 원소들을 가지는 상위 bag이다. 따라서, list의 app으로 표현될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition add <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span>nat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span>bag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bag <span class=\"token operator\">:=</span>\nv <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span></code></pre></div>\n<p>해당 bag에 하나의 원소를 더하는 것도 list와 동일하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition member <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span>nat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span>bag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool <span class=\"token operator\">:=</span>\nnegb <span class=\"token punctuation\">(</span>beq<span class=\"token punctuation\">_</span>nat <span class=\"token punctuation\">(</span>count v s<span class=\"token punctuation\">)</span> O<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>그외에도 이와 같이, v가 들어있는지를 확인하는 member 함수를 만들 수 있다. 이외에도 remove_one, subset 등의 함수를 구현.</p>","frontmatter":{"title":"3. Lists: 배열 데이터 타입","date":"July 16, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/lf/3-lists/","previous":{"fields":{"slug":"/lf/5-tactics/"},"frontmatter":{"title":"5. Tactics: 추가적인 증명의 기술들","category":"LF"}},"next":{"fields":{"slug":"/lf/2-induction/"},"frontmatter":{"title":"2. Induction: 귀납에 의한 증명","category":"LF"}}}}