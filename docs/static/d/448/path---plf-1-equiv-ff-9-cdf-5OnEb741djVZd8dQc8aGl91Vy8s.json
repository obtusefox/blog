{"data":{"site":{"siteMetadata":{"title":"Bee starter","author":"[Your Name]","siteUrl":"https://han-minhee.github.io/blog","comment":{"disqusShortName":"","utterances":"han-minhee/blog"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"ac1e54f6-411a-59b8-a7c3-e78422c07a16","excerpt":"Equivalence of Programs Before you move on: If you are not familiar with   in the  Logical Foundations  volume, you might want to review it. In this beginning chapter of  Programming Language Foundations , we will first deal with equivalences of programs. That is, if two programs…","html":"<h1 id=\"equivalence-of-programs\"><a href=\"#equivalence-of-programs\" aria-label=\"equivalence of programs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Equivalence of Programs</h1>\n<p>Before you move on: If you are not familiar with <code class=\"language-text\">Imp</code> in the <strong>Logical Foundations</strong> volume, you might want to review it.</p>\n<p>In this beginning chapter of <strong>Programming Language Foundations</strong>, we will first deal with equivalences of programs. That is, if two programs, given same states, evaluates to same values, they can be said to be equivalent. W will use the simple language <code class=\"language-text\">Imp</code> we defined in the <strong>Logical Foundations</strong> volume.</p>\n<h2 id=\"definitions\"><a href=\"#definitions\" aria-label=\"definitions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Definitions</h2>\n<h3 id=\"equivalence\"><a href=\"#equivalence\" aria-label=\"equivalence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Equivalence</h3>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition aequiv <span class=\"token punctuation\">(</span>a1 a2 <span class=\"token punctuation\">:</span> aexp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Prop <span class=\"token operator\">:=</span>\n  forall <span class=\"token punctuation\">(</span>st <span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    aeval st a1 <span class=\"token operator\">=</span> aeval st a2<span class=\"token punctuation\">.</span>\n\nDefinition bequiv <span class=\"token punctuation\">(</span>b1 b2 <span class=\"token punctuation\">:</span> bexp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Prop <span class=\"token operator\">:=</span>\n  forall <span class=\"token punctuation\">(</span>st <span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    beval st b1 <span class=\"token operator\">=</span> beval st b2<span class=\"token punctuation\">.</span></code></pre></div>\n<p>Given the same states, if two expressions are evaluated to a same value, they can be said to be equivalent. Let’s prove some small facts about equivalence.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Theorem aequiv<span class=\"token punctuation\">_</span>example<span class=\"token punctuation\">:</span> aequiv <span class=\"token punctuation\">(</span>X <span class=\"token operator\">-</span> X<span class=\"token punctuation\">)</span> <span class=\"token number\">0.</span>\nProof<span class=\"token punctuation\">.</span>\n  intros st<span class=\"token punctuation\">.</span> simpl<span class=\"token punctuation\">.</span> omega<span class=\"token punctuation\">.</span>\nQed<span class=\"token punctuation\">.</span>\n\nTheorem bequiv<span class=\"token punctuation\">_</span>example<span class=\"token punctuation\">:</span> bequiv <span class=\"token punctuation\">(</span>X <span class=\"token operator\">-</span> X <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>imp <span class=\"token boolean\">true</span><span class=\"token punctuation\">.</span>\nProof<span class=\"token punctuation\">.</span>\n  intros st<span class=\"token punctuation\">.</span> unfold beval<span class=\"token punctuation\">.</span>\n  rewrite aequiv<span class=\"token punctuation\">_</span>example<span class=\"token punctuation\">.</span> reflexivity<span class=\"token punctuation\">.</span>\nQed<span class=\"token punctuation\">.</span></code></pre></div>\n<p>Now, let’s move on to some other trivial theorems.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Theorem skip<span class=\"token punctuation\">_</span>left <span class=\"token punctuation\">:</span> forall c<span class=\"token punctuation\">,</span>\n  cequiv\n    <span class=\"token punctuation\">(</span>SKIP<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>\nProof<span class=\"token punctuation\">.</span>\n  <span class=\"token comment\">(* WORKED IN CLASS *)</span>\n  intros c st st'<span class=\"token punctuation\">.</span>\n  split<span class=\"token punctuation\">;</span> intros H<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token comment\">(* -> *)</span>\n    inversion H<span class=\"token punctuation\">;</span> subst<span class=\"token punctuation\">.</span>\n    inversion H2<span class=\"token punctuation\">.</span> subst<span class=\"token punctuation\">.</span>\n    assumption<span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">-</span> <span class=\"token comment\">(* &lt;- *)</span>\n    apply E<span class=\"token punctuation\">_</span>Seq <span class=\"token keyword\">with</span> st<span class=\"token punctuation\">.</span>\n    apply E<span class=\"token punctuation\">_</span>Skip<span class=\"token punctuation\">.</span>\n    assumption<span class=\"token punctuation\">.</span>\nQed<span class=\"token punctuation\">.</span></code></pre></div>\n<p>Proof for the theorem isn’t that complex. One thing you might noticed is that just using <code class=\"language-text\">intros</code> will not introduce st and st’. But as soon as you split, st and st’ will be automatically introduced. Introducing st and st` explicitly will make it easier to follow our own thesis. </p>\n<p>Also, just using <code class=\"language-text\">inversion</code> for every case won’t work, as they will yields too many subcases and it will only complicate the problem more. You should think before proceed.</p>\n<p>[ Not Finished ]</p>","frontmatter":{"title":"PLF 1. Equiv","date":"March 22, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/plf/1-equiv/","previous":{"fields":{"slug":"/plf/2-hoare1/"},"frontmatter":{"title":"PLF 2. Hoare 1","category":"PLF"}},"next":{"fields":{"slug":"/development/quick_start/"},"frontmatter":{"title":"Quick Start","category":"development"}}}}