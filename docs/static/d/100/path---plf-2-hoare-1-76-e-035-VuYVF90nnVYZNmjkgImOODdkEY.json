{"data":{"site":{"siteMetadata":{"title":"Bee starter","author":"[Your Name]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"15a593b3-4d82-505f-90d4-b8a1d3c0d219","excerpt":"Hoare Logic, Part I In the previous chapters, we’ve defined   language, which is pretty simple, yet captures the key features of languages like C, Java, and so on. Additionally, we’ve proved some basic properties like: We will develop the topic in this, and later chapters…","html":"<h1 id=\"hoare-logic-part-i\"><a href=\"#hoare-logic-part-i\" aria-label=\"hoare logic part i permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hoare Logic, Part I</h1>\n<p>In the previous chapters, we’ve defined <code class=\"language-text\">Imp</code> language, which is pretty simple, yet captures the key features of languages like C, Java, and so on. Additionally, we’ve proved some basic properties like:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">    <span class=\"token operator\">-</span> determinism <span class=\"token keyword\">of</span> evaluation\n\n    <span class=\"token operator\">-</span> equivalence <span class=\"token keyword\">of</span> some different ways <span class=\"token keyword\">of</span> writing down the\n      definitions <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> functional <span class=\"token operator\">and</span> relational definitions <span class=\"token keyword\">of</span>\n      arithmetic expression evaluation<span class=\"token punctuation\">)</span>\n\n    <span class=\"token operator\">-</span> guaranteed termination <span class=\"token keyword\">of</span> certain classes <span class=\"token keyword\">of</span> programs\n\n    <span class=\"token operator\">-</span> correctness <span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span> the sense <span class=\"token keyword\">of</span> preserving meaning<span class=\"token punctuation\">)</span> <span class=\"token keyword\">of</span> a number\n      <span class=\"token keyword\">of</span> useful program transformations\n\n    <span class=\"token operator\">-</span> behavioral equivalence <span class=\"token keyword\">of</span> programs <span class=\"token punctuation\">(</span><span class=\"token keyword\">in</span> the <span class=\"token punctuation\">[</span>Equiv<span class=\"token punctuation\">]</span>\n      chapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We will develop the topic in this, and later chapters. Especially in this chapter, we will work on a reasoning system named <strong>Hoare Logic</strong>. Hoare Logic consists of how to write down the specification of a program, and how to prove their correctness.</p>\n<h2 id=\"denoting-assertions\"><a href=\"#denoting-assertions\" aria-label=\"denoting assertions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Denoting Assertions</h2>\n<p>First, we need a way of making assertions about properties. </p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition Assertion <span class=\"token operator\">:=</span> state <span class=\"token operator\">-></span> Prop<span class=\"token punctuation\">.</span></code></pre></div>\n<p>So, an assertion takes a state, and outputs corresponding Prop about the state.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Check Assertion<span class=\"token punctuation\">.</span></code></pre></div>\n<p>Above command will output <code class=\"language-text\">Type</code>, as an assertion is actually a type.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition as1 <span class=\"token punctuation\">:</span> Assertion <span class=\"token operator\">:=</span> <span class=\"token keyword\">fun</span> st <span class=\"token operator\">=></span> st X <span class=\"token operator\">=</span> <span class=\"token number\">3.</span></code></pre></div>\n<p><code class=\"language-text\">as1</code> is an assertion, which means that for any state <code class=\"language-text\">st</code>, <code class=\"language-text\">X = 3</code> holds.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Check as1<span class=\"token punctuation\">.</span></code></pre></div>\n<p>Above will show that <code class=\"language-text\">as1</code> is an <code class=\"language-text\">Assertion</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Check fun (st:state) =&gt; st X = 3.</code></pre></div>\n<p>will show that <code class=\"language-text\">as1</code> is a function which takes a state and returns a Prop.</p>\n<p>So, “Formally, an assertion is just a family of propositions indexed by a [state].” However, the way of writing an assertion like above way is pretty cumbersome. As we are talking about a state in a Prop, we can ommit <code class=\"language-text\">st</code>s. </p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">  <span class=\"token keyword\">fun</span> st <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>st Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>st Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">/</span>\\\n      <span class=\"token operator\">~</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>S <span class=\"token punctuation\">(</span>st Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>S <span class=\"token punctuation\">(</span>st Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span></code></pre></div>\n<p>will be written as:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Z <span class=\"token operator\">*</span> Z <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">/</span>\\ <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>S Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>S Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3 id=\"some-conventions-in-the-chapter\"><a href=\"#some-conventions-in-the-chapter\" aria-label=\"some conventions in the chapter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Some Conventions in the Chapter</h3>\n<p>In the chapter, certain naming conventions will be used to name many things. For variables, uppercase letters like X, Y, Z will denote Imp variables, while lovercase letters like x, y, m, n will denote ordinary Coq variables.</p>\n<h3 id=\"assertions-on-implication\"><a href=\"#assertions-on-implication\" aria-label=\"assertions on implication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assertions on Implication</h3>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition assert<span class=\"token punctuation\">_</span>implies <span class=\"token punctuation\">(</span>P Q <span class=\"token punctuation\">:</span> Assertion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Prop <span class=\"token operator\">:=</span>\n  forall st<span class=\"token punctuation\">,</span> P st <span class=\"token operator\">-></span> Q st<span class=\"token punctuation\">.</span>\n\nNotation <span class=\"token string\">\"P ->> Q\"</span> <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>assert<span class=\"token punctuation\">_</span>implies P Q<span class=\"token punctuation\">)</span>\n                      <span class=\"token punctuation\">(</span>at level <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> hoare<span class=\"token punctuation\">_</span>spec<span class=\"token punctuation\">_</span>scope<span class=\"token punctuation\">.</span></code></pre></div>\n<p>Also, <code class=\"language-text\">P -&gt;&gt; Q</code> means that P implies Q, i.e. if P holds in some state st, Q will also holds in st. <code class=\"language-text\">hoare_spec_scope</code> means that the notation will only be used in certain scopes, that is, in this case, <code class=\"language-text\">hoare_spec_scope</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Open Scope hoare<span class=\"token punctuation\">_</span>spec<span class=\"token punctuation\">_</span>scope<span class=\"token punctuation\">.</span></code></pre></div>\n<p>we can open the scope like this, and,</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Notation <span class=\"token string\">\"P &lt;&lt;->> Q\"</span> <span class=\"token operator\">:=</span>\n  <span class=\"token punctuation\">(</span>P <span class=\"token operator\">->></span> Q <span class=\"token operator\">/</span>\\ Q <span class=\"token operator\">->></span> P<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>at level <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> hoare<span class=\"token punctuation\">_</span>spec<span class=\"token punctuation\">_</span>scope<span class=\"token punctuation\">.</span></code></pre></div>\n<p>will define iff notation.</p>\n<h2 id=\"hoare-triple\"><a href=\"#hoare-triple\" aria-label=\"hoare triple permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hoare Triple</h2>\n<p>The behaviour of a command can be thought to be transitioning from one state to another. So, let’s say, a command <code class=\"language-text\">c</code> starts in a <code class=\"language-text\">st</code> state and terminates in a final state <code class=\"language-text\">st&#39;</code>. In this manner, <code class=\"language-text\">P-&gt;&gt;Q</code> means that if <code class=\"language-text\">st</code> satisfy P, then <code class=\"language-text\">st&#39;</code> will satisfy Q. This is called a <strong>Hoare Triple</strong>. <code class=\"language-text\">P</code> and <code class=\"language-text\">Q</code> is called the precondition and postcondition of <code class=\"language-text\">c</code>, respectively.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Definition hoare<span class=\"token punctuation\">_</span>triple\n           <span class=\"token punctuation\">(</span>P <span class=\"token punctuation\">:</span> Assertion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>c <span class=\"token punctuation\">:</span> com<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Q <span class=\"token punctuation\">:</span> Assertion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Prop <span class=\"token operator\">:=</span>\n  forall st st'<span class=\"token punctuation\">,</span>\n     st <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span> c <span class=\"token punctuation\">]</span><span class=\"token operator\">=></span> st'  <span class=\"token operator\">-></span>\n     P st  <span class=\"token operator\">-></span>\n     Q st'<span class=\"token punctuation\">.</span></code></pre></div>\n<p>When written formally, it can be interpreted like this: if <code class=\"language-text\">st</code>, with a command <code class=\"language-text\">c</code>, progress to <code class=\"language-text\">st&#39;</code>, if <code class=\"language-text\">P</code> holds for <code class=\"language-text\">st</code>, <code class=\"language-text\">Q</code> holds for <code class=\"language-text\">st&#39;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">Notation <span class=\"token string\">\"{{ P }}  c  {{ Q }}\"</span> <span class=\"token operator\">:=</span>\n  <span class=\"token punctuation\">(</span>hoare<span class=\"token punctuation\">_</span>triple P c Q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>at level <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> c at next level<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">:</span> hoare<span class=\"token punctuation\">_</span>spec<span class=\"token punctuation\">_</span>scope<span class=\"token punctuation\">.</span></code></pre></div>\n<p>We will use more compact notation above.</p>\n<p>[Continued]</p>","frontmatter":{"title":"PLF 2. Hoare 1","date":"March 22, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/plf/2-hoare1/","previous":{"fields":{"slug":"/lf/1-basics/"},"frontmatter":{"title":"Logical Foundations 1. Basics","category":"LF"}},"next":{"fields":{"slug":"/plf/1-equiv/"},"frontmatter":{"title":"PLF 1. Equiv","category":"PLF"}}}}