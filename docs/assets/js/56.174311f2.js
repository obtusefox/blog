(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{104:function(a,e,t){"use strict";t.r(e);var s=t(1),r=Object(s.a)({},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"패키지-시스템"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#패키지-시스템","aria-hidden":"true"}},[a._v("#")]),a._v(" 패키지 시스템")]),a._v(" "),t("p",[a._v('사실 학부 수준에서 프로그래밍을 배우며 패키지나 라이브러리를 신경쓸 일은 많지 않다. 내가 학부 수준에서 이와 관해 애먹은 경우는 단 두 번이었다. 한 번은 Principles of Programming Language 수업에서, IDE에서 Scala 프로젝트를 생성하거나 이미 제공된 패키지를 import해야 했던 경우. 이것은 사실 IDE에 익숙하지 않았던 탓이기도 하다. 다른 한 번은 NPM을 처음 사용해보던 때. 내가 만든 패키지 이름을 바꾸는 것, webpack에서 경로를 지정해주고... 등등. 신경쓰고 싶지 않다. 커널 빌드를 해보긴 했지만, 이때도 주어진 스크립트를 이용해서 패키지나 모듈을 신경 쓸 필요는 적었다. 하지만 이제 우리는 패키지를 신경써야 한다. "The Book"이 cargo를 처음부터 가르치는 것은, rust를 접하는 이들이 실제 production level에 있는 사람들이 많은 탓도 있을테고, 한편으로는 패키지가 기초부터 유용하게 쓰일 수 있음을 강조하는 것일지도?')]),a._v(" "),t("h2",{attrs:{id:"cargo-생성"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cargo-생성","aria-hidden":"true"}},[a._v("#")]),a._v(" Cargo 생성")]),a._v(" "),t("p",[a._v("Cargo를 생성하면, 그에 대응하는 directory 또한 생성된다.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ cargo new hello_cargo\n$ cd hello_cargo\n")])])]),t("p",[a._v("해당 경로에 들어가면 'Cargo.toml' "),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn1",id:"fnref1"}},[a._v("[1]")])]),a._v(" 파일이 있다.")]),a._v(" "),t("p",[a._v("나의 경우, 'Cargo.toml'의 내용은")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('[package]\nname = "hello_cargo"\nversion = "0.1.0"\nauthors = ["Han, Minhee <muteape@gmail.com>"]\nedition = "2018"\n\n[dependencies]\n')])])]),t("p",[a._v("이었다. 아마 git 설정 내용이 있는 경우 이 내용을 바탕으로 추정을 하는 것으로 보인다. 각각의 항목들이 무엇을 뜻하는지는 쉽게 이해할 수 있다."),t("br"),a._v("\nCargo 디렉토리 안의 "),t("code",[a._v("src/main.rs")]),a._v("에는")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('fn main() {\n    println!("Hello, world!");\n}\n')])])]),t("p",[a._v("가 이미 작성되어 있다. 이제 build를 해보자.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ cargo build\n")])])]),t("p",[a._v("를 하면 "),t("code",[a._v("/target/debug")]),a._v(" 경로에 "),t("code",[a._v("hello_cargo")]),a._v(" binary file이 생성된다.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$cargo run\n")])])]),t("p",[a._v("을 입력하면 컴파일과 실행을 동시에 수행한다. 만약 소스가 변하지 않았다면 컴파일을 하지 않고 실행만 한다. "),t("code",[a._v("cargo check")]),a._v("명령어는 컴파일할 수 있는지를 검사하지만, executable한 파일을 생성하지는 않는다. 코드를 작성하는 중에 "),t("code",[a._v("check")]),a._v("명령어를 통해 코드 문법을 검사할 수 있다. 이것은 참으로 마음에 드는 기능이다! 큰 차이는 없지만 무의미하게 build를 해보는 것보다 세련되었다.")]),a._v(" "),t("p",[a._v("만약 일반적인 "),t("code",[a._v("cargo build")]),a._v(" 대신에")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("cargo build --release\n")])])]),t("p",[a._v("명령어를 사용한다면, "),t("code",[a._v("target/debug")]),a._v("경로가 아니라 "),t("code",[a._v("target/release")]),a._v(" 경로에 executable 파일이 생성되는데, 이 경우 일반 "),t("code",[a._v("cargo build")]),a._v("명령어와 달리 최적화가 이뤄지기 때문에 컴파일 시간은 더 길게 걸린다.")]),a._v(" "),t("p",[a._v("이 정도로 cargo는 일단 넘어가도록 하자.")]),a._v(" "),t("hr",{staticClass:"footnotes-sep"}),a._v(" "),t("section",{staticClass:"footnotes"},[t("ol",{staticClass:"footnotes-list"},[t("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[t("p",[a._v("Tom Preston-Werner라는 사람이 만든, Tom’s Obvious, Minimal Language라는 포맷이다. 컴공식 유머 감각이 빗나는 작명이다. "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[a._v("↩︎")])])])])])])},[],!1,null,null,null);r.options.__file="rust1.md";e.default=r.exports}}]);