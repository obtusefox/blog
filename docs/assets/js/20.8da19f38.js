(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{289:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_3-lists-배열-데이터-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-lists-배열-데이터-타입","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. Lists: 배열 데이터 타입")]),t._v(" "),a("h2",{attrs:{id:"pair-타입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pair-타입","aria-hidden":"true"}},[t._v("#")]),t._v(" Pair 타입")]),t._v(" "),a("p",[t._v("우선 두 개의 nat을 가지는 pair type을 정의하자.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Inductive natprod "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" pair "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" natprod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("code",[t._v("natprod")]),t._v(" 타입은 pair라는 하나의 타입 유형을 가지는데, 이 pair는 두 개의 nat를 차례로 받아 하나의 pair를 만든다. 예를 들어")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Check "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pair "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("를 실행하면,")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("pair "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("가 response로 출력된다. "),a("code",[t._v("pair 3 5")]),t._v("는 "),a("code",[t._v("natprod")]),t._v(" 타입의 한 종류이기 때문에, 그 타입은 natprod가 된다. 그럼 이제 이 pair에 대해 함수를 정의해보자. pair 타입이기 때문에 fst와 snd가 먼저 정의되어야 한다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Definition fst "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" pair x y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  \nDefinition snd "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" pair x y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" y\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("pair가 아닌 경우는 반환값을 정의하지 않았다. 그럼 이제 pair에다가 좀 더 편리한 표기법을 더해주자.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Notation "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"( x , y )"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pair x y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\nDefinition fst' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\nDefinition snd' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" y\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\nDefinition swap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("pair "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("pair를 대충 정의하였으니, pair의 기본적인 성질들에 대해 증명을 해보자. 일단 surjectivity.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Theorem surjective"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("pairing' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" forall "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fst "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" snd "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nProof"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  reflexivity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nQed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("surjective function은 전사함수, y의 치역과 공역이 같을 때를 말한다. 이 경우에는 아마 이미 정의된 pair p에 대하여 새로 정의한 fst와 snd 함수를 적용했을 때, 그 결과물이 여전히 p이기 때문에, 공역과 치역이 같아진다고 말하는 듯 하다. 위의 경우는 이 p가 무엇을 의미하는지를, (n,m)과 같이 분리해서 적었기 때문에 바로 simplify할 수 있다. 그러나 다음과 같은 경우는 곧바로 simplify되지 않는다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Theorem surjective"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("pairing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("stuck "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" forall "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fst p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" snd p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nProof"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  simpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("(* Doesn't reduce anything! *)")]),t._v("\nAbort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("따라서 우리는 destruct를 통해 p의 패턴 매칭을 해줘야 한다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Theorem surjective"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("pairing "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" forall "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natprod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fst p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" snd p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nProof"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  intros p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  destruct p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  simpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  reflexivity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  Qed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"자연수-리스트의-정의"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자연수-리스트의-정의","aria-hidden":"true"}},[t._v("#")]),t._v(" 자연수 리스트의 정의")]),t._v(" "),a("p",[t._v("아까 정의한 natprod 타입을 보다 일반적으로 확장하여 리스트 형태로 만들어보자. 대부분의 언어에서 list가 정의되는 것처럼,")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Inductive natlist "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" nil  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natlist\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" cons "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" natlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" natlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("와 같이 정의하자. cons는 nat 하나와 natlist를 받아 natlist를 만들고, nil은 아무 인자도 받지 않은 채로 natlist를 만든다. 예를 들어 [1, 2, 3]의 리스트는")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Definition mylist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" cons "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cons "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cons "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("와 같이 정의될 수 있다. 여기에도 마찬가지로 새로운 notation을 더해주자.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Notation "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x :: l"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cons x l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("at level "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right associativity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nNotation "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[ ]"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nNotation "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[ x ; .. ; y ]"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cons x "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cons y nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("그럼 이제 보다 편하게")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Definition mylist1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nDefinition mylist2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nDefinition mylist3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("와 같이 리스트를 정의할 수 있다.")]),t._v(" "),a("h2",{attrs:{id:"리스트와-관련된-기본적인-함수들"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#리스트와-관련된-기본적인-함수들","aria-hidden":"true"}},[t._v("#")]),t._v(" 리스트와 관련된 기본적인 함수들")]),t._v(" "),a("p",[t._v("리스트를 다루는 기본적인 함수들을 정의해보자.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Fixpoint repeat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n count "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" O "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" nil\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" S count' "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repeat n count'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("위와 같은 "),a("code",[t._v("repeat")]),t._v(" 함수는 "),a("code",[t._v("n")]),t._v("과 "),a("code",[t._v("count")]),t._v("를 인자로 받아, count 개 만큼의 n이 이어지는 리스트를 만든다. 예를 들어")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("repeat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("이 성립한다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Fixpoint length "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("natlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" nil "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" O\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" S "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("length 함수는 주어진 리스트의 길이를 반환한다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Fixpoint app "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 l2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" l1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" nil    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" l2\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("app t l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\nNotation "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x ++ y"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("app x y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right associativity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" at level "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("app 함수는 주어진 두 리스트를, 순서대로 결합한다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Definition hd "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("nat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("natlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" nil "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" default\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" h\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\nDefinition tl "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("natlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" natlist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("match")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" nil "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" nil\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" t\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("hd와 tl은 각각 리스트의 head와 tail을 반환한다.")]),t._v(" "),a("h2",{attrs:{id:"리스트를-이용한-bag의-구현"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#리스트를-이용한-bag의-구현","aria-hidden":"true"}},[t._v("#")]),t._v(" 리스트를 이용한 bag의 구현")]),t._v(" "),a("p",[t._v("bag은 set과 비슷하지만, 한 element가 여러 번 나타날 수 있다는 점에서 다르다. 즉, 원소의 순서는 상관 없고, 같은 원소가 여러 번 등장할 수 있다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Definition bag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" natlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nDefinition sum "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" bag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" bag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("bag은 데이터 구조상으로는 natlist와 동일하다. 그리고 함수 sum은 집합으로는 합집합에 해당한다. sum a b는 a와 b의 모든 원소들을 가지는 상위 bag이다. 따라서, list의 app으로 표현될 수 있다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Definition add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("nat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("bag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\nv "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("해당 bag에 하나의 원소를 더하는 것도 list와 동일하다.")]),t._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[t._v("Definition member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("nat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("bag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("\nnegb "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("nat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count v s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" O"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("그외에도 이와 같이, v가 들어있는지를 확인하는 member 함수를 만들 수 있다. 이외에도 remove_one, subset 등의 함수를 구현.")])])},[],!1,null,null,null);s.default=e.exports}}]);