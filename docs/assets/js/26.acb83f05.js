(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{279:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"tactics-추가적인-증명의-기술들"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tactics-추가적인-증명의-기술들","aria-hidden":"true"}},[t._v("#")]),t._v(" Tactics: 추가적인 증명의 기술들")]),t._v(" "),s("h2",{attrs:{id:"apply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apply","aria-hidden":"true"}},[t._v("#")]),t._v(" apply")]),t._v(" "),s("p",[t._v("다음과 같은 코드가 있다.")]),t._v(" "),s("div",{staticClass:"language-ocaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ocaml"}},[s("code",[t._v("Theorem silly1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" forall "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n m o p "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nProof"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  intros n m o p eq1 eq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  rewrite "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" eq1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("그리고 이제 우리는")]),t._v(" "),s("div",{staticClass:"language-ocaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ocaml"}},[s("code",[t._v("rewrite "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" eq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nreflexivity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("를 통해 증명을 마칠 수도 있다. 하지만, 그 대신")]),t._v(" "),s("div",{staticClass:"language-ocaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ocaml"}},[s("code",[t._v("apply eq2\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("를 적용하여 rewrite와 reflexivity를 대신할 수 있다. `apply는 조건문과도 함께 쓰일 수 있다. 적용되는 주장이 한 전제의 귀결인 경우, 전제는 증명될 subgoal들에 포함될 것이다.")]),t._v(" "),s("div",{staticClass:"language-ocaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ocaml"}},[s("code",[t._v("Theorem silly2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" forall "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n m o p "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("forall "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q r "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nProof"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  intros n m o p eq1 eq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  apply eq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" apply eq1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  Qed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("또한 가설 H를 "),s("code",[t._v("apply")]),t._v("한다면 "),s("code",[t._v("forall")]),t._v("에 따라 어떤 변수를 양화한다.")]),t._v(" "),s("div",{staticClass:"language-ocaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ocaml"}},[s("code",[t._v("Theorem silly3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("firsttry "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" forall "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" beq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("nat n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n     beq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("nat "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("S n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nProof"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  intros n H"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("(** Here we cannot use [apply] directly, but we can use the [symmetry] tactic, which switches the left and right sides of an equality in the goal. *)")]),t._v("\n  symmetry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  simpl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("(** (This [simpl] is optional, since [apply] will perform simplification first, if needed.) *)")]),t._v("\n  apply H"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  Qed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("바로 "),s("code",[t._v("apply")]),t._v("를 쓸 수 없는 경우, "),s("code",[t._v("symmetry")]),t._v("를 이용해 양변을 바꿀 수 있다. 혹은, "),s("code",[t._v("apply with")]),t._v("로, 적용하는 Theorem이나 Lemma의 특정 변수를 우리가 원하는 값이나 변수로 대체할 수 있다.")]),t._v(" "),s("div",{staticClass:"language-ocaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ocaml"}},[s("code",[t._v("Theorem trans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("eq "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" forall "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n m o "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nProof"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  intros X n m o eq1 eq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" rewrite "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" eq1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" rewrite "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" eq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  reflexivity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("  Qed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("예를 들어 trans_eq는 transitivity를 증명한다. 이 정리를 적용하여 한 사례를 증명해보도록 하자.")]),t._v(" "),s("div",{staticClass:"language-ocaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ocaml"}},[s("code",[t._v("Example trans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("eq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("example' "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" forall "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a b c d e f "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nProof"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  intros a b c d e f eq1 eq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  apply trans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),t._v("eq "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  apply eq1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" apply eq2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("   Qed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("이 경우, "),s("code",[t._v("apply")]),t._v("가 자동으로, "),s("code",[t._v("trans_eq")]),t._v("의 "),s("code",[t._v("type X")]),t._v("를 "),s("code",[t._v("nat")]),t._v("으로, "),s("code",[t._v("n")]),t._v("을 "),s("code",[t._v("[a;b]")]),t._v("로, "),s("code",[t._v("o")]),t._v("를 "),s("code",[t._v("[e;f]")]),t._v("로 양화한다. 그러나 "),s("code",[t._v("m")]),t._v("에 대해서는 양화를 하지 못한다. 따라서 이를 우리가 "),s("code",[t._v("with")]),t._v("로 지정해야 한다. 사실 어떤 경우에 적용이 되고, 어떤 경우에 적용되지 않는지는 모르겠다. "),s("a",{attrs:{href:"https://coq.inria.fr/refman/proof-engine/tactics.html#coq:tacn.apply",target:"_blank",rel:"noopener noreferrer"}},[t._v("Coq의 공식 문서"),s("OutboundLink")],1),t._v("를 참고.")]),t._v(" "),s("h2",{attrs:{id:"inversion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inversion","aria-hidden":"true"}},[t._v("#")]),t._v(" inversion")])])},[],!1,null,null,null);a.default=e.exports}}]);