(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{277:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"hoare-logic-part-i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hoare-logic-part-i","aria-hidden":"true"}},[s._v("#")]),s._v(" Hoare Logic, Part I")]),s._v(" "),a("p",[s._v("In the previous chapters, we've defined "),a("code",[s._v("Imp")]),s._v(" language, which is pretty simple, yet captures the key features of languages like C, Java, and so on. Additionally, we've proved some basic properties like:")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" determinism "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" evaluation\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" equivalence "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" some different ways "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" writing down the\n      definitions "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" functional "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" relational definitions "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v("\n      arithmetic expression evaluation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" guaranteed termination "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" certain classes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" programs\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" correctness "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" the sense "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" preserving meaning"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" a number\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" useful program transformations\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" behavioral equivalence "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" programs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" the "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Equiv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n      chapter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("We will develop the topic in this, and later chapters. Especially in this chapter, we will work on a reasoning system named "),a("strong",[s._v("Hoare Logic")]),s._v(". Hoare Logic consists of how to write down the specification of a program, and how to prove their correctness.")]),s._v(" "),a("h2",{attrs:{id:"denoting-assertions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#denoting-assertions","aria-hidden":"true"}},[s._v("#")]),s._v(" Denoting Assertions")]),s._v(" "),a("p",[s._v("First, we need a way of making assertions about properties.")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Definition Assertion "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" state "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" Prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("So, an assertion takes a state, and outputs corresponding Prop about the state.")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Check Assertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("Above command will output "),a("code",[s._v("Type")]),s._v(", as an assertion is actually a type.")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Definition as1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Assertion "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" st "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" st X "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("as1")]),s._v(" is an assertion, which means that for any state "),a("code",[s._v("st")]),s._v(", "),a("code",[s._v("X = 3")]),s._v(" holds.")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Check as1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("Above will show that "),a("code",[s._v("as1")]),s._v(" is an "),a("code",[s._v("Assertion")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Check fun (st:state) => st X = 3.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("will show that "),a("code",[s._v("as1")]),s._v(" is a function which takes a state and returns a Prop.")]),s._v(" "),a("p",[s._v('So, "Formally, an assertion is just a family of propositions indexed by a [state]." However, the way of writing an assertion like above way is pretty cumbersome. As we are talking about a state in a Prop, we can ommit '),a("code",[s._v("st")]),s._v("s.")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fun")]),s._v(" st "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("st Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("st Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("st Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("st Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("will be written as:")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Z "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" Z "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S Z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"some-conventions-in-the-chapter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#some-conventions-in-the-chapter","aria-hidden":"true"}},[s._v("#")]),s._v(" Some Conventions in the Chapter")]),s._v(" "),a("p",[s._v("In the chapter, certain naming conventions will be used to name many things. For variables, uppercase letters like X, Y, Z will denote Imp variables, while lovercase letters like x, y, m, n will denote ordinary Coq variables.")]),s._v(" "),a("h3",{attrs:{id:"assertions-on-implication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assertions-on-implication","aria-hidden":"true"}},[s._v("#")]),s._v(" Assertions on Implication")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Definition assert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("implies "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("P Q "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Assertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Prop "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("\n  forall st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" P st "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" Q st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\nNotation "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"P ->> Q"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("assert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("implies P Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("at level "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" hoare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("spec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("Also, "),a("code",[s._v("P ->> Q")]),s._v(" means that P implies Q, i.e. if P holds in some state st, Q will also holds in st. "),a("code",[s._v("hoare_spec_scope")]),s._v(" means that the notation will only be used in certain scopes, that is, in this case, "),a("code",[s._v("hoare_spec_scope")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Open Scope hoare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("spec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("we can open the scope like this, and,")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Notation "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"P <<->> Q"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("P "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->>")]),s._v(" Q "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("\\ Q "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->>")]),s._v(" P"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("at level "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" hoare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("spec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("will define iff notation.")]),s._v(" "),a("h2",{attrs:{id:"hoare-triple"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hoare-triple","aria-hidden":"true"}},[s._v("#")]),s._v(" Hoare Triple")]),s._v(" "),a("p",[s._v("The behaviour of a command can be thought to be transitioning from one state to another. So, let's say, a command "),a("code",[s._v("c")]),s._v(" starts in a "),a("code",[s._v("st")]),s._v(" state and terminates in a final state "),a("code",[s._v("st'")]),s._v(". In this manner, "),a("code",[s._v("P->>Q")]),s._v(" means that if "),a("code",[s._v("st")]),s._v(" satisfy P, then "),a("code",[s._v("st'")]),s._v(" will satisfy Q. This is called a "),a("strong",[s._v("Hoare Triple")]),s._v(". "),a("code",[s._v("P")]),s._v(" and "),a("code",[s._v("Q")]),s._v(" is called the precondition and postcondition of "),a("code",[s._v("c")]),s._v(", respectively.")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Definition hoare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("triple\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("P "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Assertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Q "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Assertion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Prop "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("\n  forall st st'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     st "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" st'  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("\n     P st  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("\n     Q st'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("When written formally, it can be interpreted like this: if "),a("code",[s._v("st")]),s._v(", with a command "),a("code",[s._v("c")]),s._v(", progress to "),a("code",[s._v("st'")]),s._v(", if "),a("code",[s._v("P")]),s._v(" holds for "),a("code",[s._v("st")]),s._v(", "),a("code",[s._v("Q")]),s._v(" holds for "),a("code",[s._v("st'")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-ocaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ocaml"}},[a("code",[s._v("Notation "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{{ P }}  c  {{ Q }}"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hoare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("triple P c Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("at level "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("90")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c at next level"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" hoare"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("spec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("_")]),s._v("scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("We will use more compact notation above.")]),s._v(" "),a("p",[s._v("[Continued]")])])},[],!1,null,null,null);t.default=e.exports}}]);